自定义增删改查组件的流程：  在v1表里面默认list_display是空列表
我们先在定义的插件里
     def ready(self):
        from django.utils.module_loading import autodiscover_modules
        autodiscover_modules('stark')（这个stark的名字是和引用的app里面stark同名）
   我们先来说下admin启用时的流程：
   首先，是在admin里面把类注册在里面，
   接在在url里面调用之前的的路由系统：
   所以，我们在stark文件下面创建一个service文件夹，下面创建一个文件，里面写两个类：
   一个是class StarkSite(object)；class StarkConfig(object)
   接着实例化
   site = StarkSite()
   接着我们要在app01下面建一个文件用来注册类的和(admin.py类似）
        from app01 import models
        from stark.service import v1
        from django.forms import ModelForm
        from django.shortcuts import render,redirect

        print(123)


        class UserInfoModelForm(ModelForm):
            class Meta:
                model = models.UserInfo
                fields = '__all__'
                error_messages = {
                    'name': {
                        'required': '用户名不能为空',
                    }
                }


        class UserInfoConfig(v1.StarkConfig):
            list_display = ['id', 'name']
            model_form_class = UserInfoModelForm

        class UserTypeConfig(v1.StarkConfig):
            list_display = ['id', 'name',]

        v1.site.register(models.UserType,UserTypeConfig)

        v1.site.register(models.UserInfo, UserInfoConfig)


        class RoleConfig(v1.StarkConfig):
            list_display = ['id', 'name']


        v1.site.register(models.Role, RoleConfig)
        class HostModelForm(ModelForm):
            class Meta:
                model=models.Host
                fields=['id','hostname','ip','port']
                error_messages={
                    "hostname":{
                        'required':'主机名不能为空',
                    },
                    'ip':{
                        'required':'ip地址不能为空',
                        'invalid':'格式错误',
                    }
                }
        class HostConfig(v1.StarkConfig):
            def ip_port(self,obj=None,is_header=False):
                if is_header:
                    return  '自定义列'
                return '%s:%s'%(obj.ip,obj.port,)


            list_display = ['id', 'hostname','ip','port',ip_port]
            model_form_class = HostModelForm
            def delete_views(self, request, nid, *args, **kwargs):
                if request.method=="GET":
                    return  render(request,'stark/my_delete.html')
                else:
                    self.model_class.objects.filter(pk=nid).delete()
                    return redirect(self.get_list_url())


        v1.site.register(models.Host, HostConfig)










在昨天工作的基础上今天的工作是：
我们是默认给每个表加上样式(选择（用checkbox）、编辑（用的是跳转）和删除按钮（用的是跳转）)用list_display
首先是做url的反向解析做到删除按钮和编辑按钮都可以自动识别是哪个表
首先是对选择、编辑、删除按钮放在默认的表里(V1),我们首先判断这几个按钮是表头还是表格里的数据。
通过 if is_header:
            return '选择'
来判断如果不是我们就执行下面的代码
  return mark_safe("<input type='checkbox' name='pk' value='%s'>" % (obj.id,))（这个是选择的插件）
  或者
  return mark_safe("<a href='%s'>编辑</a>" % (self.get_change_url(obj.id)))（这个是编辑或者删除）
 我们要定义一下函数来对应下路由系统的反射。
    def get_change_url(self, nid):
        name = '%s/%s/change_list' % (self.model_class._meta.app_label, self.model_class._meta.model_name,)
        change_url = reverse(name, args=(nid,))
        return change_url
 我们希望用这个插件的人自己定义需要显示哪些字段：我们在这个基础上加上选择、删除、编辑等三个插件。
 我们定义一个函数来接收

 def get_list_display():
      data=[]
      if self.list_display:
          data.extend(list_display)
          data.append(StarkConfig.edit)
          data.append(StarkConfig.delete)
          data.insert(0,StarkConfig.checkbox)
      return data
 今天我们在展示页面上添加了是否显示添加按钮等功能：
         # 添加按钮
        show_add_btn = True

        # 显示按钮
        def get_show_add_btn(self):
            return self.show_add_btn
        我们在返回函数上添加一个是添加按钮的跳转路径和判断它是否显示的条件
        我们在展示页面加上添加按钮和判断条件
 我们现在要对添加、删除、编辑按钮做事件就是增删改查：
 注：添加、删除、编辑、我们通过用ModelForm来做
 我们默认  model_form_class = None 是为了插件使用者可以自己定义
 我们定义一个函数来生成ModelForm(两种方法，普通版和type版)
      def get_model_form_class(self):
            if self.model_form_class:
                return self.model_form_class
            from django.forms import ModelForm
            # class TestModelForm(ModelForm):
            #     class Meta:
            #         model = self.model_class
            #         fields = '__all__'
            meta = type('meta', (object,), {'model': self.model_class, 'fields': '__all__'})
            TestModelForm = type("TestModelForm", (ModelForm,), {"Meta": meta})
            return TestModelForm

 (a)现对添加按钮做事件
      我们添加按钮通过用ModelForm来生成页面和保存
      这个就是ModelForm的使用：
      我们先判断是哪种方式传参：
          如果是get我们先实例化一个Form传到前端
          如果是返回函数我们要先接收，在判断它是否符合我们的定义格式如果符合我们就保存，在跳转到这个表格的展示页面
           如果没有通过验证那就再返回这个页面包含着错误信息
           代码如下：
               def add_views(self, request, *args, **kwargs):
                    model_form_class = self.get_model_form_class()
                    if request.method == "GET":
                        form = model_form_class()
                        return render(request, 'stark/add_view.html', {'form': form})
                    else:
                        form = model_form_class(request.POST)
                        if form.is_valid():
                            form.save()
                            return redirect(self.get_list_url())
                        return render(request, 'stark/add_view.html', {'form': form})


 (b)编辑按钮的使用
    首先，我们判断是哪种形式的数据传入：
    如果是：GET:我们编辑时需要传入一个id，我们需要在另一个页面里展示你选中的那一行数据，需要ModelForm初始化数据
    如果是:POST:我们需要传入的数据和初始化的那个对象，接着我们在进行格式判断，如果通过就直接保存，然后跳转到展示页面；如果没有通过我们就直接让他返回错误信息
        def change_views(self, request, nid, *args, **kwargs):
            obj = self.model_class.objects.filter(pk=nid).first()
            if not obj:
                return redirect(self.get_list_url())
            model_form_class = self.get_model_form_class()
            if request.method == "GET":
                form = model_form_class(instance=obj)
                return render(request, "stark/change_view.html", {"form": form})
            else:
                form = model_form_class(instance=obj, data=request.POST)
                if form.is_valid():
                    form.save()
                    return redirect(self.get_list_url())
                return render(request, "stark/change_view.html", {"form": form})
 (c)删除按钮的事件：
    我们需要选中的那一行的数据的id，然后到数据库查找直接删除掉，然后返回到展示页面
     def delete_views(self, request, nid, *args, **kwargs):
        self.model_class.objects.filter(pk=nid).delete()
        return redirect(self.get_list_url())

我们在app01的stark里面可以自己定义一个类来继承StarkConfig它的方法。
我们在stark里面可以定义ModelForm用来在保存或者编辑数据时显示错误信息等。
我们要在这里定义list_display,用来需要显示的字段
    class UserInfoModelForm(ModelForm):
        class Meta:
            model = models.UserInfo
            fields = '__all__'
            error_messages = {
                'name': {
                    'required': '用户名不能为空',
                }
            }


    class UserInfoConfig(v1.StarkConfig):
        list_display = ['id', 'name']
        model_form_class = UserInfoModelForm


我们也可以在这里定义函数，它就会走这里(如果没有这个方法就会走StarkConfigd的方法)
    class HostConfig(v1.StarkConfig):
        def ip_port(self,obj=None,is_header=False):
            if is_header:
                return  '自定义列'
            return '%s:%s'%(obj.ip,obj.port,)
        list_display = ['id', 'hostname','ip','port',ip_port]
        model_form_class = HostModelForm
        def delete_views(self, request, nid, *args, **kwargs):
            if request.method=="GET":
                return  render(request,'stark/my_delete.html')
            else:
                self.model_class.objects.filter(pk=nid).delete()
                return redirect(self.get_list_url())
    v1.site.register(models.Host, HostConfig)

增删改查的前端页面：
    我们用的知识点有：静态文件的引入：{% load staticfiles %}   <link rel="stylesheet" href="{% static "stark/bootstrap/css/bootstrap.css" %}" />
        {% include 'stark/form.html' %}  这个来引入几个文件共同的部分。
        通过部分的代码：
        <form method="post"  class="form-horizontal" novalidate>
            {% csrf_token %}
            {% for field in form %}
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="inputEmail3" class="col-sm-2 control-label">{{ field.label }}</label>
                        <div class="col-sm-10">
                            {{ field }}
                            {{ field.errors.0 }}
                        </div>
                    </div>
                </div>
            {% endfor %}
            <div class="col-sm-offset-11 col-sm-1">
                <input type="submit" class="btn btn-primary" value="提交">
            </div>
        </form>











12.22号


部门页面去掉了编辑
把部门名称作为编辑的：

是我们增加了edit_display()
edit_display=['title']
我们在V1里面增加一下代码

  我们在Changlist里面增加了



  self.edit_display = config.get_edit_display()
  if field_name in self.edit_display:
      val =self.get_edit_tag(row.pk,val)




  def get_edit_tag(self,pk,text):
        query_str =self.request.GET.urlencode()
        params=QueryDict(mutable=True)
        params[self.config._query_param_key]=query_str
        return  mark_safe("<a href='%s?%s'>%s</a>"%(self.config.get_change_url(pk),params.urlencode(),text))


  我们在Starkconfig里面增加了：
  edit_display=[]
    def get_edit_display(self):
        result=[]
        if self.edit_display:
            result.extend(self.edit_display)
        return  result
我们把搜索条件往右飘：style='float:right'




用户表我们需要更改的是外键和限制显示的条件



文字描述业务：

公共客户的查询：
公共客户的的条件：新录入的数据、15天没有成交、3天没有跟进、状态是没有报名的
我们从客户数据库里查询到客户通过条件搜索来取得：
用的技术是Q查询，15天和3天没有跟进用的是 or连接;状态是没报名



课程顾问抢单：我们在公共客户后面加上一个按钮，让课程顾问抢单。
我们在后端先判断数据的真实性，我们先从数据里查询下有没有从前端传来的数据并且也判断下它是否也是符合公共客户的条件；在把它的数据更新为现在的时间
我们在自动分配表里要更新下这个人的数据


新客户录入：我们用modelform来添加数据
首先生成页面，显示页面
如果是post:先判断是否符合格式如果不符合再返回。如果符合那就拿到客户顾问的id进行保存，我们要把多对多关系的课程先取出，过会但给他赋值关系



查询自己的客户：
我们在客户表里查询自己的客户

自动分配：
我们通过建立一个迭代器，每次循环一个客户顾问id出来。
我们通过客户顾问的权重与可以接收的数量：来排列客户顾问的id
 v = [3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 3, 3]


我们要先建立一个权重与个人能力的表
我们自定义一个小的模块专门处理顾客的id：
返回顾客的id





业务流程：
我们的目的是：
自动化办公和自动化分配客户给课程顾问等
我们的业务场景：
公共客户的查询：
公共客户的的条件：新录入的数据、15天没有成交、3天没有跟进、状态是没有报名的
我们从客户数据库里查询到客户通过条件搜索来取得：
用的技术是Q查询，15天和3天没有跟进用的是 or连接;状态是没报名
我们通过这个场景，让他们



课程顾问抢单：我们在公共客户后面加上一个按钮，让课程顾问抢单。
我们在后端先判断数据的真实性，我们先从数据里查询下有没有从前端传来的数据并且也判断下它是否也是符合公共客户的条件；在把它的数据更新为现在的时间
我们在自动分配表里要更新下这个人的数据


新客户录入：我们用modelform来添加数据
首先生成页面，显示页面
如果是post:先判断是否符合格式如果不符合再返回。如果符合那就拿到客户顾问的id进行保存，我们要把多对多关系的课程先取出，过会但给他赋值关系



查询自己的客户：
我们在客户表里查询自己的客户

自动分配：
我们通过建立一个迭代器，每次循环一个客户顾问id出来。
我们通过客户顾问的权重与可以接收的数量：来排列客户顾问的id
 v = [3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 2, 6, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 3, 3]


我们要先建立一个权重与个人能力的表
我们自定义一个小的模块专门处理顾客的id：
返回顾客的id


订单分配如何实现的：
使用的技术点就是单利模式导入redis:
@classmethod的使用是类可以使用方法：(注意里面用cls，而不是self)

实现步骤：
第一步，单利模式导入redis
第二步：
这个类里面包含四个方法
方法(1):主要是初始化客户分配列表
我们连接到客户顾问范围表，查询数据通过倒叙排列取出所有人的可接受范围；
我们定义一个空列表：
通过一个whileTrue循环，让这个循环一直先去。在这个循环中放个for循环取到的所有的客户顾问对象；
通过设置一个数量count=0：让他循环一次增加一次，并且要设立一个flag=False：
通过count数值来判断客户顾问可接受数量是否大于count；
如果大于就放把客户顾问的id入列表中，并且把flag设置为True；
如果不大于就不做任何处理，在和for循环并列的下面放置一个函数判断Flag是否为False，如果为false就说明没有对象的可接受
数量大于当前这个数，我们就跳出这个循环，用break。
跳出循环后，我们判断这个列表是否有值：
   如果有值，我们就把这个值赋值到连接到redis的句柄的两个列表里(sale_id_list,sale_id_list_origin)并且返回为True。
   没有值，就不做任何处理。
在这个方法的最后要返回一个False。（执行到这一步后，就说明数据没有数据）
方法(2)主要是循环取出客户顾问的id
接着我们要判断sale_id_list_origin的长度用的是redis方法；如果是空，我们要调用方法（1），我们通过返回值来判断是否取到值
如果没有取到值，就返回空，
如果取到值，我们就把值从列表sale_id_list里pop出来
并判断这个值是否为空，如果不为空，我们就返回。



接着我们要判断是否需要重新重数据库取值：如果标志为布尔值True我们要先删除sale_id_list_origin这个列表里面的东西。然后再调用方法(1)并且判断返回值是否为True
如果部位True就返回None。
然后要删除 是否要判断需要重新从数据库取值的标志CONN.delete('sale_id_reset')
如果不需要重新取值：我们需要把sale_id_list_origin这里的值赋值到sale_id_list。
我们先求出sale_id_list_origin这个列表的长度。
然后循环这个值用索引取出值，
            for i in range(ct):
                item = CONN.lindex('sale_id_list_origin', i)
                CONN.rpush('sale_id_list', item)
并把值放在sale_id_list里面。
方法(3)
是设置是否需要重新从数据库取值的：
        CONN.set('sale_id_reset',1)
方法(4)
   是回掉函数
   CONN.lpush('sale_id_list',nid)
   用在如果保存客户数据出现异常，就把客户顾问的id重新放回到sale_id_list列表中


excel批量导入：多对多关系的绑定可以使用.add(加对象)或者=[]里面放的是id
用的技术点：事务、xlrd、BytesIO、发送邮件(工厂模式)、importlib、getattr方法等
我们给客户一个模板让他们下载后填入东西后批量导入：
我们先从前端取到数据后以二进制的形式放到内存中。
接着我们导入xlrd，用xlrd的open_workbook方法打开这个文件
sheet页面我们从0开始，因为是我们固定好了表头，我们要把表头放到内存中。
接着我们循环，这个对象的行数，(因为每一行都是一个客户对象)
我们要取到客户顾问id，判断是否为空，如果为空就返回('没有客户顾问可以分配')
我们通过循环的index值来获取每一个行对象。
我们为构造







